<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberCopied">

	<select id="login" resultType="MemberDTO">
		SELECT	MEM_IDX,
				MEM_ID, 
				MEM_NAME, 
				MEM_EMAIL, 
				MEM_PW, 
				MEM_BIRTH,
				MEM_PHONE, 
				MEM_GENDER, 
				MEM_ADDR, 
				MEM_MBTI, 
				MEM_PROFILE,
				FILE_IDX,
				PAYMENT_R_YN,
				AUTH_YN,
				(SELECT PAY.PMT_DATE FROM payment_copied_tb PAY WHERE PAY.MEM_IDX = (SELECT MEM_IDX FROM member_copied_tb WHERE MEM_ID = #{memId}) AND (PMT_PRODUCT = 'prm' or PMT_PRODUCT = 'first') ORDER BY DATE(PAY.PMT_DATE) DESC, TIME(PAY.PMT_DATE) DESC LIMIT 1) AS PMT_DATE,
				(SELECT SUM(POI.poi_point) FROM point_copied_tb POI WHERE member_copied_tb.MEM_IDX = POI.MEM_IDX) AS poiPoint,
				IF (
               COALESCE(
                  (
                     SELECT DATE_ADD(PAY.PMT_DATE, INTERVAL 1 MONTH) 
                     FROM payment_copied_tb PAY 
                     WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX 
                     AND PAY.PMT_PRODUCT = 'prm' 
                     ORDER BY PAY.PMT_DATE DESC 
                     LIMIT 1
                  ), 
                  (
                     SELECT DATE_ADD(PAY.PMT_DATE, INTERVAL 7 DAY) 
                     FROM payment_copied_tb PAY 
                     WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX 
                     AND PAY.PMT_PRODUCT = 'first' 
                     ORDER BY PAY.PMT_DATE DESC 
                     LIMIT 1
                  )
               ) >= NOW(),
               'Y', 
               'N'
            ) AS serviceYn
		FROM member_copied_tb
		WHERE mem_id = #{memId}
		AND WTHDR_YN = "N"
	</select>
	
	<select id="wthdrCheck" resultType="String">
		SELECT WTHDR_YN
		FROM member_copied_tb
		WHERE mem_id = #{memId}
	</select>
	
	<select id="loginInfo" resultType="MemberDTO">
		SELECT *,
				IF (DATE_ADD((SELECT PAY.PMT_DATE FROM payment_copied_tb PAY WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX AND PMT_PRODUCT = 'prm' ORDER BY DATE(PAY.PMT_DATE) DESC, TIME(PAY.PMT_DATE) DESC LIMIT 1), INTERVAL 1 MONTH) >= now(), 'Y', 'N') as serviceYn
		FROM member_copied_tb
		WHERE mem_id = #{memId}
	</select>

	<insert id="join" parameterType="MemberDTO">
	INSERT INTO member_copied_tb 
		(mem_name, 
		mem_id,
		mem_email, 
		mem_pw,
		mem_phone, 
		mem_birth,
		mem_gender, 
		mem_addr, 
		mem_mbti, 
		mem_profile,
		salt,
		channel_name,
		auth_key,
		customer_uid
		,kakao_sid)
		VALUES 
		(#{memName}, #{memId},#{memEmail}, #{memPw}, #{memPhone}, 
		IF(#{memBirth} IS NULL OR #{memBirth} = '', NULL, #{memBirth}), 
		#{memGender}, #{memAddr}, #{memMbti}, #{memProfile}, #{salt}, #{channelName}, #{authKey}, #{customerUid}, #{kakaoSID}) 
	</insert>
	
	<!-- 방금 insert한 memIdx가져오기 -->
	<select id="searchEmail" parameterType="string" resultType="_int">
		SELECT 
			mem_Idx
		FROM 
			member_copied_tb
		WHERE 
			mem_email = #{insertEmail}
	</select>
	
	<!-- 방금 insert한 memId 가져오기 -->
	<select id="fideNewRegisterId" parameterType="_int" resultType="String">
		SELECT 
			mem_Id
		FROM 
			member_copied_tb
		WHERE 
			mem_Idx = #{memIdx}
	</select>
	<!-- 정기 결제 paymentRYN 교체(아임포트)-->
	<update id="updateRYN" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET
			PAYMENT_R_YN = "Y"
		<if test="customerUid !=null and customerUid !=''"> , CUSTOMER_UID = #{customerUid}  </if>	
		
		WHERE
			MEM_IDX = #{memIdx}
		
	</update>
	<!-- 정기 결제 paymentRYN 교체(카카오페이)-->
	<update id="updateRYNkakao" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET
			PAYMENT_R_YN = "Y"
		<if test="kakaoSID !=null and kakaoSID !=''"> , kakao_SID = #{kakaoSID}  </if>			
		WHERE
			MEM_IDX = #{memIdx}
		
	</update>
	
	<!-- 회원가입 시 100원/7일 정기결제 -->
	<insert id="ImportPeriodicJoin" parameterType="MemberDTO">
		INSERT INTO payment_copied_tb (
			MEM_IDX, 
			pmt_product, 
			pmt_product_qty, 
			pmt_product_amt, 
			pmt_date, 
			pmt_product_cd
		)
		VALUES(
			#{memIdx},
			#{pmtProduct},
			#{pmtProductQty},
			#{pmtProductAmt},
			NOW(),
			#{pmtProductCd}
		)
	</insert>
	
	<!-- 배너 타고 들어온 회원 정보값 블러오기 -->
	
	 <!-- 회원가입 / 아이디 중복확인 -->
   <select id="memIdChk" resultType="int">
      SELECT COUNT(*) 
      FROM member_copied_tb
      WHERE mem_id = #{memId}
   </select>
	
	<!-- 회원가입 / 이메일중복확인 -->
   <select id="emailChk" resultType="int">
      SELECT COUNT(*) 
      FROM member_copied_tb
      WHERE mem_email = #{memEmail}
   </select>
   
    <!-- 회원가입 / 전화번호중복확인-->
   <select id="phoneChk" resultType="int">
      SELECT COUNT(*) 
      FROM member_copied_tb
      WHERE mem_phone = #{memPhone}
   </select>
   
	<update id="memberModify" parameterType="memberDTO">
		UPDATE
			member_copied_tb
		<trim prefix="SET" prefixOverrides=",">	
			<if test="memEmail     !=null and memEmail     !=''"> , MEM_EMAIL  = #{memEmail}    </if>
			<if test="memName !=null and memName !=''"> , MEM_NAME = #{memName} </if>					
			<if test="memPhone !=null and memPhone !=''"> , MEM_PHONE =#{memPhone}       </if>
			<if test="memBirth !=null and memBirth !=''"> , MEM_BIRTH = #{memBirth} </if>	
			<if test="memAddr !=null and memAddr !=''"> , MEM_ADDR = #{memAddr} </if>	
			<if test="memGender !=null and memGender !=''"> , MEM_GENDER = #{memGender} </if>	
			<if test="memMbti !=null and memMbti !=''"> , MEM_MBTI = #{memMbti} </if>	
			<if test="memProfile !=null and memGender !=''"> , MEM_PROFILE = #{memProfile} </if>	
			<if test="fileIdx !=null and fileIdx !=''"> , FILE_IDX = #{fileIdx}  </if>	
		</trim>
		WHERE
			MEM_IDX = #{memIdx}
	</update>
	
	<select id="detailFile" parameterType="_int" resultType="FileDTO">
		SELECT 
			FILE_IDX
			, FILE_ORIGINAL_NAME
			, FILE_CHANGED_NAME
			, FILE_PATH
		FROM 
			FILE_TB
		WHERE
			FILE_IDX = #{fileIdx}
	</select>
	
	<!-- 아이디(이메일)찾기  -->
	<select id="findId" resultType="MemberDTO">
		select * from member_copied_tb 
		where mem_email=#{memEmail} 
		and WTHDR_YN = "N"
	</select>

	<!-- 비밀번호찾기 -->
	<select id="findPw" resultType="MemberDTO">
		select * from member_copied_tb 
		where mem_email=#{memEmail}
		and mem_id = #{memId}
		and WTHDR_YN = "N"
	</select>
	<!-- 비밀번호 메일전송후 비밀번호 업데이트  -->
	<update id="findPwUpdate" parameterType="MemberDTO">
		UPDATE member_copied_tb
		SET mem_pw = #{memPw}, salt = #{salt}
		WHERE MEM_IDX = #{memIdx}
	</update>
   <!-- 파일 등록 -->
   <insert id="insertFile" parameterType="FileDTO">
		INSERT INTO FILE_TB (
		<trim prefixOverrides=",">
			<if test="fileIdx       !=null and fileIdx       !=''"> , File_IDX      </if>
			<if test="fileOriginalName       !=null and fileOriginalName       !=''"> , FILE_ORIGINAL_NAME        </if>
			<if test="fileChangedName       !=null and fileChangedName       !=''"> , FILE_CHANGED_NAME        </if>
			<if test="filePath       !=null and filePath       !=''"> , FILE_PATH        </if>	
		</trim>
		) VALUES(
		<trim prefixOverrides=",">
			<if test="fileIdx       !=null and fileIdx       !=''"> ,        #{fileIdx} </if>
			<if test="fileOriginalName       !=null and fileOriginalName       !=''"> , #{fileOriginalName}        </if>
			<if test="fileChangedName       !=null and fileChangedName       !=''"> , #{fileChangedName}        </if>
			<if test="filePath       !=null and filePath       !=''"> , #{filePath}        </if>	
		</trim>	
		)
		<selectKey resultType="int" keyProperty="fileIdx" order="AFTER"><![CDATA[ SELECT MAX(FILE_IDX)+1 FROM file_tb ]]></selectKey>
   </insert>
   
   <!-- 회원 정보 수정(파일) -->
	<update id="updateFile" parameterType="FileDTO">
		UPDATE 
			FILE_TB 
		<trim prefix="SET" prefixOverrides=",">				
			<if test="fileOriginalName       !=null and fileOriginalName       !=''"> , FILE_ORIGINAL_NAME  = #{fileOriginalName}        </if>
			<if test="fileChangedName       !=null and fileChangedName       !=''"> , FILE_CHANGED_NAME = #{fileChangedName}        </if>
			<if test="filePath       !=null and filePath       !=''"> , FILE_PATH = #{filePath}        </if>	
		</trim>
		WHERE
			FILE_IDX = #{fileIdx}	
	
	</update>
	
	<select id="searchFileIdx" resultType="_int">
		SELECT
			FILE_IDX
		FROM
			FILE_TB
		WHERE
			FILE_CHANGED_NAME = #{fileChangedName}
	</select>
	
	<!-- 회원정보 수정 시 이메일 중복확인 -->
	<select id="modifyEmailChk" resultType="int">
		SELECT COUNT(*)
		FROM member_copied_tb
		WHERE mem_email = #{memEmail}
		AND mem_idx != #{memIdx}
	</select>
	
	<!-- 이메일 변경 -->
	<update id="memberModifyEmail" parameterType="memberDTO">
		UPDATE
			member_copied_tb
		<trim prefix="SET" prefixOverrides=",">	
			<if test="memEmail  !=null and memEmail  !=''"> ,  mem_email = #{memEmail}  </if>
		</trim>
		WHERE
			mem_idx = #{memIdx}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="memberModifyPw" parameterType="memberDTO">
		UPDATE
			member_copied_tb
		<trim prefix="SET" prefixOverrides=",">	
			<if test="memPw  !=null and memPw  !=''"> ,  mem_pw = #{memPw}  </if>
			<if test="salt   !=null and salt   !=''"> ,  salt = #{salt}  </if>
		</trim>
		WHERE
			mem_idx = #{memIdx}
	</update>
	
	<select id="loginUser" resultType="MemberDTO">
      SELECT  
        mem_idx, 
        mem_id,
        mem_name, 
        mem_email, 
        mem_pw, 
        mem_birth,
        mem_phone, 
        mem_gender, 
        mem_addr, 
        mem_mbti, 
        mem_profile,
        payment_r_yn,
        wthdr_yn,
        file_idx,
        auth_yn,
		(SELECT PAY.PMT_DATE FROM payment_copied_tb PAY WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX AND (PMT_PRODUCT = 'prm' or PMT_PRODUCT = 'first') ORDER BY DATE(PAY.PMT_DATE) DESC, TIME(PAY.PMT_DATE) DESC LIMIT 1) AS PMT_DATE,
		IF (
               COALESCE(
                  (
                     SELECT DATE_ADD(PAY.PMT_DATE, INTERVAL 1 MONTH) 
                     FROM payment_copied_tb PAY 
                     WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX 
                     AND PAY.PMT_PRODUCT = 'prm' 
                     ORDER BY PAY.PMT_DATE DESC 
                     LIMIT 1
                  ), 
                  (
                     SELECT DATE_ADD(PAY.PMT_DATE, INTERVAL 7 DAY) 
                     FROM payment_copied_tb PAY 
                     WHERE member_copied_tb.MEM_IDX = PAY.MEM_IDX 
                     AND PAY.PMT_PRODUCT = 'first' 
                     ORDER BY PAY.PMT_DATE DESC 
                     LIMIT 1
                  )
               ) >= NOW(),
               'Y', 
               'N'
            ) AS serviceYn
        FROM member_copied_tb
        WHERE mem_idx = #{memIdx}
   </select>
	
	<update id="onResign" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET PAYMENT_R_YN = "N",
			KAKAO_SID = null,
			CUSTOMER_UID = null
		WHERE MEM_IDX = #{memIdx}
	</update>
	
	<update id="wthdrFromUser" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET WTHDR_YN = 'Z'
		WHERE MEM_IDX = #{memIdx}
	</update> 
	
	<update id="deleteUser" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET WTHDR_YN = 'Y',
			PAYMENT_R_YN = 'N',
			KAKAO_SID = null,
			CUSTOMER_UID = null
		WHERE MEM_IDX = #{memIdx}
	</update> 
	
	<!-- 정기 결제 paymentRYN 교체-->
	<update id="updatePaymentRYN" parameterType="PayMentDTO">
		UPDATE
			member_copied_tb
		<trim prefix="SET" prefixOverrides=",">
			<if test="paymentRYn       !=null and paymentRYn       !=''"> , <![CDATA[ PAYMENT_R_YN = "Y" ]]> </if>
			<if test="kakaoSID     !=null and kakaoSID       !=''"> , <![CDATA[ KAKAO_SID = #{kakaoSid}]]>  </if>
			<if test="customerUid       !=null and customerUid       !=''"> , <![CDATA[ CUSTOMER_UID = #{customUid}]]>  </if>	
		</trim>		
		WHERE
			MEM_IDX = #{memIdx}
	</update>
	
	
	<!-- 이메일 인증을 위한 쿼리
	========================================================== -->
	<!-- 회원가입 시 이메일 인증을 위한 랜덤번호 저장 -->
	<update id="updateAuthKey" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET
			auth_key = #{authKey}
		WHERE
			mem_email = #{memEmail}
	</update>
	
	<!-- 이메일 인증이 되면 auth_yn 값을 Y로 변경 -->
	<update id="updateAuthYn" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET
			auth_yn = "Y"
		WHERE
			mem_email = #{memEmail}
		AND auth_key = #{authKey}
	</update>
	
	<!-- 이메일 인증 여부 판단 -->
	<select id="selectAuthYn" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM member_copied_tb
		WHERE mem_email = #{memEmail}
		AND auth_yn = "Y"		
	</select>
	
	<!-- 회원정보 수정 시 이메일 변경이 되면 auth_yn 값을 N으로 변경 -->
	<update id="modifyEmailAuthYn" parameterType="MemberDTO">
		UPDATE
			member_copied_tb
		SET
			auth_yn = "N"
		WHERE
			mem_idx = #{memIdx}
	</update>
	<!-- ========================================================== -->
	
	<delete id="failPayment" parameterType="int">
		DELETE
		FROM member_copied_tb
		WHERE MEM_IDX = #{memIdx}
	</delete>
</mapper>